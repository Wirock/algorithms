package leetcode;

/**
 * 319. 灯泡开关
 * 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。
 *
 * 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。
 *
 * 找出并返回 n 轮后有多少个亮着的灯泡。
 *
 *
 *
 * 示例 1：
 *
 *
 *
 * 输入：n = 3
 * 输出：1
 * 解释：
 * 初始时, 灯泡状态 [关闭, 关闭, 关闭].
 * 第一轮后, 灯泡状态 [开启, 开启, 开启].
 * 第二轮后, 灯泡状态 [开启, 关闭, 开启].
 * 第三轮后, 灯泡状态 [开启, 关闭, 关闭].
 *
 * 你应该返回 1，因为只有一个灯泡还亮着。
 * 示例 2：
 *
 * 输入：n = 0
 * 输出：0
 * 示例 3：
 *
 * 输入：n = 1
 * 输出：1
 *
 *
 * 提示：
 *
 * 0 <= n <= 109
 * @author chenzw
 * @date 2021/11/15
 */
public class Solution319 {
    //数学
    //每个灯泡的开关次数对应它的编号的约数数量
    //经过偶数次开关灯为关闭，奇数次为开启
    //只需要考虑约数个数的奇偶性，不必计算每个编号的约数数量。因为约数都是成对出现的，对于数k,如果存在整数平方根，即k为完全平方数，则有一对约数是一样的，约数为奇数个，否则约数为偶数个。
    //则答案为1到n的完全平方数的数量,满足i>0,i^2<=n的i有Math.floor(Math.sqrt(n))个
    public int bulbSwitch(int n) {
        return (int)Math.floor(Math.sqrt(n+0.0));
    }
}
