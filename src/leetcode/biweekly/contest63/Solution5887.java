package leetcode.biweekly.contest63;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * 5887. 两个有序数组的第 K 小乘积 显示英文描述
 * 通过的用户数0
 * 尝试过的用户数0
 * 用户总通过次数0
 * 用户总提交次数0
 * 题目难度Hard
 * 给你两个 从小到大排好序 且下标从 0 开始的整数数组 nums1 和 nums2 以及一个整数 k ，请你返回第 k （从 1 开始编号）小的 nums1[i] * nums2[j] 的乘积，其中 0 <= i < nums1.length 且 0 <= j < nums2.length 。
 *
 *
 * 示例 1：
 *
 * 输入：nums1 = [2,5], nums2 = [3,4], k = 2
 * 输出：8
 * 解释：第 2 小的乘积计算如下：
 * - nums1[0] * nums2[0] = 2 * 3 = 6
 * - nums1[0] * nums2[1] = 2 * 4 = 8
 * 第 2 小的乘积为 8 。
 * 示例 2：
 *
 * 输入：nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6
 * 输出：0
 * 解释：第 6 小的乘积计算如下：
 * - nums1[0] * nums2[1] = (-4) * 4 = -16
 * - nums1[0] * nums2[0] = (-4) * 2 = -8
 * - nums1[1] * nums2[1] = (-2) * 4 = -8
 * - nums1[1] * nums2[0] = (-2) * 2 = -4
 * - nums1[2] * nums2[0] = 0 * 2 = 0
 * - nums1[2] * nums2[1] = 0 * 4 = 0
 * 第 6 小的乘积为 0 。
 * 示例 3：
 *
 * 输入：nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3
 * 输出：-6
 * 解释：第 3 小的乘积计算如下：
 * - nums1[0] * nums2[4] = (-2) * 5 = -10
 * - nums1[0] * nums2[3] = (-2) * 4 = -8
 * - nums1[4] * nums2[0] = 2 * (-3) = -6
 * 第 3 小的乘积为 -6 。
 *
 *
 * 提示：
 *
 * 1 <= nums1.length, nums2.length <= 5 * 104
 * -105 <= nums1[i], nums2[j] <= 105
 * 1 <= k <= nums1.length * nums2.length
 * nums1 和 nums2 都是从小到大排好序的。
 * @author chenzw
 * @date 2021/10/16
 */
public class Solution5887 {
    //二分查找
    public long kthSmallestProduct(int[] nums1, int[] nums2, long k) {
        List<Long> pos1 = new ArrayList<>();
        List<Long> pos2 = new ArrayList<>();
        List<Long> neg1 = new ArrayList<>();
        List<Long> neg2 = new ArrayList<>();
        for(int i:nums1){
            if(i>0)pos1.add((long)i);
            else if(i<0)neg1.add((long)-i);
        }
        for(int i:nums2){
            if(i>0)pos2.add((long)i);
            else if(i<0)neg2.add((long)-i);
        }
        Collections.sort(neg1);
        Collections.sort(neg2);
        long negCount = (long)pos1.size()*neg2.size() + (long)pos2.size()*neg1.size();
        long zero1 = (long)nums1.length-pos1.size()-neg1.size();
        long zero2 = (long)nums2.length-pos2.size()-neg2.size();
        long zeroCount = zero1*(pos2.size()+neg2.size())+zero2*(pos1.size()+neg1.size())+zero1*zero2;
        //long posCount = pos1.size()*pos2.size() + neg1.size()*neg2.size();
        long left = 0;
        long right = Math.max((long)nums1[nums1.length-1]*nums2[nums2.length-1],(long)nums1[0]*nums2[0]);
        List<Long> arr1 = pos1;
        List<Long> arr2 = pos2;
        List<Long> arr3 = neg1;
        List<Long> arr4 = neg2;
        int sign = 1;
        if(k<=negCount){
            right = -Math.min((long)nums1[nums1.length-1]*nums2[0],(long)nums1[0]*nums2[nums2.length-1]);
            k = negCount - k+1;
            arr1 = neg1;
            arr2 = pos2;
            arr3 = neg2;
            arr4 = pos1;
            sign = -1;
        }else if(k<=negCount+zeroCount){
            return 0;
        }else{
            k = k-zeroCount-negCount;
        }
        while(left<=right){
            long mid = (left+right)>>1;
            if(countProductLessThanTarget(arr1,arr2,mid)+countProductLessThanTarget(arr3,arr4,mid)>=k){
                right = mid-1;
            }else{
                left = mid+1;
            }
        }
        return sign*right;
    }

    private long countProductLessThanTarget(List<Long> l1,List<Long> l2,long target){
        long count = 0;
        if(l2.size()==0)return 0;
        for(int i=0;i<l1.size();i++){
            if(l1.get(i)*l2.get(0)>=target)break;
            int left = 0;
            int right = l2.size()-1;
            while(left<=right){
                int mid = (left+right)>>1;
                if(l2.get(mid)*l1.get(i)<target){
                    left = mid+1;
                }else{
                    right = mid-1;
                }
            }
            count += left;
        }
        return count;
    }

    public static void main(String[] args) {
        System.out.println(new Solution5887().kthSmallestProduct(new int[]{-498,-496,-496,-494,-493,-493,-492,-488,-488,-487,-485,-483,-480,-480,-477,-476,-475,-474,-474,-474,-473,-472,-472,-472,-471,-471,-471,-469,-468,-467,-466,-464,-464,-464,-460,-460,-457,-455,-455,-454,-452,-452,-449,-449,-448,-445,-444,-443,-441,-441,-434,-434,-433,-431,-431,-430,-429,-427,-426,-425,-422,-422,-422,-421,-420,-420,-417,-417,-414,-414,-412,-411,-410,-408,-407,-401,-400,-398,-398,-398,-398,-397,-396,-394,-385,-385,-384,-383,-383,-382,-382,-378,-378,-376,-374,-372,-372,-369,-367,-366,-366,-361,-360,-359,-358,-355,-354,-354,-352,-350,-350,-349,-348,-348,-346,-344,-343,-342,-342,-339,-333,-332,-331,-331,-330,-328,-326,-326,-325,-323,-318,-318,-317,-315,-311,-310,-309,-308,-307,-304,-304,-303,-302,-296,-295,-295,-293,-291,-288,-284,-283,-281,-280,-278,-278,-278,-275,-275,-274,-270,-268,-267,-265,-262,-261,-260,-260,-259,-257,-254,-250,-250,-247,-244,-244,-243,-242,-242,-242,-241,-241,-240,-240,-238,-238,-238,-238,-238,-237,-235,-234,-231,-230,-228,-228,-227,-225,-221,-221,-221,-214,-211,-210,-209,-209,-208,-207,-205,-205,-203,-203,-202,-201,-199,-199,-194,-193,-192,-190,-187,-187,-186,-184,-176,-174,-173,-171,-160,-158,-156,-151,-147,-145,-144,-143,-143,-141,-141,-139,-139,-138,-138,-135,-134,-133,-132,-129,-127,-126,-122,-121,-119,-119,-113,-112,-111,-111,-103,-100,-100,-99,-98,-97,-94,-93,-92,-92,-91,-91,-90,-89,-88,-87,-85,-82,-81,-80,-78,-74,-72,-65,-65,-64,-62,-57,-57,-57,-56,-53,-52,-51,-47,-46,-46,-44,-43,-42,-41,-39,-37,-35,-34,-34,-33,-33,-31,-29,-26,-25,-18,-17,-16,-15,-14,-12,-11,-10,-2,-1,0,3,3,7,11,13,14,17,18,20,21,22,27,27,28,31,33,34,35,35,36,36,38,39,41,43,43,44,46,49,49,53,53,53,54,56,59,60,62,67,68,70,71,71,71,72,74,74,76,77,78,80,81,81,81,83,83,84,88,89,90,90,94,95,98,98,99,101,102,102,104,107,109,112,113,115,116,117,117,118,118,118,119,120,121,123,123,123,124,124,127,127,128,129,131,132,142,142,143,144,145,152,155,155,156,156,157,158,158,161,168,170,175,176,178,180,181,182,183,187,189,191,192,193,194,196,196,197,198,201,204,204,208,213,213,214,214,215,219,221,223,223,224,226,227,228,228,230,230,232,232,233,238,238,239,239,242,243,244,246,246,247,247,247,251,253,260,262,263,263,265,266,269,269,272,273,277,279,279,280,283,287,288,290,292,292,294,294,295,295,296,296,297,299,300,301,305,305,306,307,310,310,311,312,313,314,316,318,319,321,321,322,322,323,323,324,327,328,330,331,332,334,334,337,337,343,344,344,352,354,357,358,363,365,365,365,367,370,371,373,374,374,374,380,381,385,387,390,391,392,393,394,396,396,398,400,402,405,405,405,406,406,407,408,412,413,414,416,419,422,423,423,424,425,425,428,430,432,434,434,435,435,436,437,439,441,442,445,446,447,448,450,450,451,451,454,456,456,458,460,461,461,464,464,465,469,472,473,479,480,480,482,483,484,487,487,487,489,490,490,497,499,500}
        ,new int[]{-500,-497,-488,-478,-473,-464,-463,-460,-460,-458,-457,-455,-453,-448,-437,-435,-428,-426,-425,-410,-405,-394,-394,-377,-377,-376,-376,-366,-363,-352,-352,-346,-344,-339,-335,-329,-325,-324,-321,-319,-309,-299,-295,-294,-289,-283,-282,-279,-273,-270,-267,-258,-239,-234,-232,-219,-219,-218,-207,-207,-206,-203,-201,-197,-196,-195,-191,-189,-181,-172,-169,-169,-165,-162,-160,-153,-130,-129,-128,-124,-118,-116,-99,-79,-65,-62,-60,-53,-50,-44,-38,-38,-37,-26,-25,-21,-19,-13,-10,-7,-5,-4,0,2,2,6,9,11,29,30,34,38,42,48,49,50,58,60,75,80,81,83,85,86,96,116,116,136,138,143,144,147,150,153,158,160,161,166,169,176,178,190,194,199,203,207,208,209,213,219,226,231,245,245,246,246,248,248,249,255,256,259,259,267,268,273,274,277,278,280,290,291,296,299,302,305,306,314,315,320,329,330,330,333,336,342,351,355,356,364,379,387,391,397,404,406,410,416,424,436,438,440,441,444,452,458,466,469,470,474,475,475,476,477,481,486,491,492,499,500}
        , 128514));
    }
}

