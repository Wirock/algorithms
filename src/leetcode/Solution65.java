package leetcode;

/**
 * 65. 有效数字
 * 有效数字（按顺序）可以分成以下几个部分：
 *
 * 一个 小数 或者 整数
 * （可选）一个 'e' 或 'E' ，后面跟着一个 整数
 * 小数（按顺序）可以分成以下几个部分：
 *
 * （可选）一个符号字符（'+' 或 '-'）
 * 下述格式之一：
 * 至少一位数字，后面跟着一个点 '.'
 * 至少一位数字，后面跟着一个点 '.' ，后面再跟着至少一位数字
 * 一个点 '.' ，后面跟着至少一位数字
 * 整数（按顺序）可以分成以下几个部分：
 *
 * （可选）一个符号字符（'+' 或 '-'）
 * 至少一位数字
 * 部分有效数字列举如下：
 *
 * ["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"]
 * 部分无效数字列举如下：
 *
 * ["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"]
 * 给你一个字符串 s ，如果 s 是一个 有效数字 ，请返回 true 。
 *
 *
 *
 * 示例 1：
 *
 * 输入：s = "0"
 * 输出：true
 * 示例 2：
 *
 * 输入：s = "e"
 * 输出：false
 * 示例 3：
 *
 * 输入：s = "."
 * 输出：false
 * 示例 4：
 *
 * 输入：s = ".1"
 * 输出：true
 *
 *
 * 提示：
 *
 * 1 <= s.length <= 20
 * s 仅含英文字母（大写和小写），数字（0-9），加号 '+' ，减号 '-' ，或者点 '.' 。
 * @author chenzw
 * @date 2021/5/28
 */
public class Solution65 {
    /*
    使用有限状态自动机来解决
    组成元素共5种，作为状态转换条件：
    (0)空字符
    (1) +/-
    (2) 0-9
    (3) .
    (4) E/e

    每增加一个元素，判断当前的状态，初始状态为空字符串
    初始空字符串下一位可以是（0）（1）（2）（3），若是（0）则进入初始空字符串状态（1）则进入正负符号位状态，（2）进入整数状态，（3）进入小数符号状态
    正负符号位状态的下一位只能是（2）（3），（2）进入整数状态，（3）进入小数符号位状态
    整数状态的下一位可以是（2）（3）（4）,（2）进入整数状态（3）进入小数状态 (4)进入指数符号状态
    小数符号位状态下一位可以是（2）（2）进入小数状态
    小数状态的下一位可以是 （2）（4），（2）进入小数状态 (4)进入指数符号状态
    指数符号状态的下一位可以是 （1）（2），（1）进入指数正负符号位状态，（2）进入指数小数状态
    指数正负符号位状态的下一位可以是（2），（2）进入指数小数状态
    指数小数状态的下一位可以是（2），（2）进入指数小数状态

    给上述状态编号
    0.初始
    1.正负符号位
    2.整数
    3,小数符号位
    4.小数
    5.指数符号
    6.指数正负符号位
    7.指数小数

    得出状态转换表，不可转换用-1表示
    条件\状态 0   1   2   3   4   5   6   7
       0      0  -1  -1  -1  -1  -1  -1  -1
       1      1  -1  -1  -1  -1   6  -1  -1
       2      2   2   2   4   4   7   7   7
       3      3   3   4  -1  -1  -1  -1  -1
       4     -1  -1   5  -1   4  -1  -1  -1
     */
    public static boolean isNumber(String s) {
        int[][] trans = new int[][]{
                {0,-1,-1,-1,-1,-1,-1,-1},
                {1,-1,-1,-1,-1, 6,-1,-1},
                {2, 2, 2, 4, 4, 7, 7, 7},
                {3, 3, 4,-1,-1,-1,-1,-1},
                {-1,-1,5,-1, 5,-1,-1,-1}
        };
        int state = 0;
        for(int i=0;i<s.length();i++){
            int condition = -1;
            if(s.charAt(i)==' '){
                condition = 0;
            }else if(s.charAt(i)=='+'||s.charAt(i)=='-'){
                condition = 1;
            }else if(s.charAt(i)>='0'&&s.charAt(i)<='9'){
                condition = 2;
            }else if(s.charAt(i)=='.'){
                condition = 3;
            }else if(s.charAt(i)=='E'||s.charAt(i)=='e'){
                condition = 4;
            }
            if(condition==-1)return false;
            state = trans[condition][state];
            if(state==-1)return false;
        }
        return state==2||state==4||state==7;
    }

    public static void main(String[] args) {
//        String[] strs = new String[]{"2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"};
        String[] strs = new String[]{"abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"};
        for(String s:strs)System.out.println(isNumber(s));
    }
}
